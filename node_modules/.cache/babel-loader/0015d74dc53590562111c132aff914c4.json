{"ast":null,"code":"var _jsxFileName = \"/Users/bangth/Desktop/TBHotel/src/containers/LoginPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListRoomRows } from \"../components/ListRoomRows\";\nimport { Button, Form, Header, Image, Input, Label, Modal, Segment, Statistic, TextArea, Confirm, Loader, Dimmer } from 'semantic-ui-react';\nimport { encrypt } from '../components/sha256';\nimport { toast } from 'react-toastify';\nexport class LoginPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errUserMsg: {\n        content: \"\"\n      },\n      errPassMsg: {\n        content: \"\"\n      },\n      errpinCode: {\n        content: \"\"\n      },\n      userInfo: {\n        token: '',\n        email: '',\n        ipAddress: ''\n      },\n      userName: '',\n      passWord: '',\n      pinCode: '',\n      isVerified: false,\n      isChecking: false\n    };\n    ['submitLogin', 'handleChangeUser', 'handleChangePass', 'verifyEmail', 'handleChangePinCode'].forEach(method => this[method] = this[method].bind(this));\n  }\n\n  handleChangePinCode(event, data) {\n    this.setState({\n      pinCode: data.value\n    });\n  }\n\n  handleChangeUser(event, data) {\n    this.setState({\n      userName: data.value\n    });\n  }\n\n  handleChangePass(event, data) {\n    this.setState({\n      passWord: data.value\n    });\n  }\n\n  componentDidMount() {\n    console.log(this.props.ipAddress);\n  }\n\n  verifyEmail() {\n    this.setState({\n      isChecking: true\n    });\n    let username = this.state.userName;\n    let encoded = \"email=\" + username + \"&ipAddress=\" + this.props.ipAddress;\n    console.log(encoded);\n    let isValid = false;\n    fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=verifyemail', {\n      method: 'POST',\n      body: encoded,\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded\"\n      }\n    }).then(async function (response) {\n      let msgerr = '';\n      await response.json().then(function (data) {\n        console.log(data);\n        data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"]) : isValid = true;\n\n        if (!msgerr) {\n          toast.success(\"Please check your email to get PIN code!\", {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          toast.error(msgerr);\n        }\n      });\n    }).then(() => {\n      this.setState({\n        isChecking: false\n      });\n\n      if (isValid) {\n        this.setState({\n          isVerified: true\n        });\n      }\n    });\n  }\n\n  submitLogin() {\n    this.setState({\n      isChecking: true\n    });\n    console.log(this.state.passWord);\n    let passWordHash = encrypt(this.state.passWord);\n    let username = this.state.userName;\n    let pincode = this.state.pinCode;\n    let encoded = \"email=\" + username + \"&pass=\" + passWordHash + \"&pincode=\" + pincode + \"&ipAddress=\" + this.props.ipAddress;\n    console.log(encoded);\n    let isValid = false;\n    let token = \"\";\n    fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=login', {\n      method: 'POST',\n      body: encoded,\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded\"\n      }\n    }).then(async function (response) {\n      let msgerr = ''; // debugger;\n\n      await response.json().then(function (data) {\n        console.log(data);\n        data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"]) : isValid = true;\n\n        if (!msgerr) {\n          token = data['token'];\n          sessionStorage.setItem('tokenTBh', data['token']);\n          sessionStorage.setItem('emailTBh', username);\n          toast.success(\"Login Successfully!\", {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          toast.error(msgerr);\n        }\n      });\n    }).then(() => {\n      this.setState({\n        isChecking: false\n      });\n\n      if (isValid) {\n        this.props.setTokenValid(username, token);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      error: this.state.errUserMsg.content != \"\" ? this.state.errUserMsg : null,\n      fluid: true,\n      onChange: this.handleChangeUser,\n      value: this.state.userName,\n      label: \"User_Name:\",\n      name: \"username\",\n      placeholder: \"Your Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), this.state.isVerified && React.createElement(Form.Input, {\n      style: {\n        display: this.state.isVerified ? '' : 'none'\n      },\n      error: this.state.errPassMsg.length > 0 ? this.state.errPassMsg : null,\n      fluid: true,\n      onChange: this.handleChangePass,\n      value: this.state.passWord,\n      type: \"password\",\n      label: \"Password:\",\n      placeholder: \"Put Your Password here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), this.state.isVerified && React.createElement(Form.Input, {\n      error: this.state.errpinCode.length > 0 ? this.state.errpinCode : null,\n      fluid: true,\n      onChange: this.handleChangePinCode,\n      value: this.state.pinCode,\n      type: \"number\",\n      label: \"Pin Code:\",\n      placeholder: \"Put your Pin code here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), this.state.isVerified ? React.createElement(Button, {\n      fluid: true,\n      size: \"large\",\n      onClick: this.submitLogin,\n      disabled: this.state.isChecking,\n      primary: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Submit\") : React.createElement(Button, {\n      fluid: true,\n      size: \"large\",\n      onClick: this.verifyEmail,\n      disabled: this.state.isChecking,\n      primary: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Verify\")));\n  }\n\n}\nLoginPage.propTypes = {\n  ipAddress: PropTypes.string,\n  setTokenValid: PropTypes.func\n};","map":{"version":3,"sources":["/Users/bangth/Desktop/TBHotel/src/containers/LoginPage.js"],"names":["React","PropTypes","ListRoomRows","Button","Form","Header","Image","Input","Label","Modal","Segment","Statistic","TextArea","Confirm","Loader","Dimmer","encrypt","toast","LoginPage","Component","constructor","props","state","errUserMsg","content","errPassMsg","errpinCode","userInfo","token","email","ipAddress","userName","passWord","pinCode","isVerified","isChecking","forEach","method","bind","handleChangePinCode","event","data","setState","value","handleChangeUser","handleChangePass","componentDidMount","console","log","verifyEmail","username","encoded","isValid","fetch","body","headers","then","response","msgerr","json","JSON","stringify","success","position","POSITION","TOP_RIGHT","error","submitLogin","passWordHash","pincode","sessionStorage","setItem","setTokenValid","render","display","length","propTypes","string","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ListRoomRows} from \"../components/ListRoomRows\";\nimport {\n    Button,\n    Form,\n    Header,\n    Image,\n    Input,\n    Label,\n    Modal,\n    Segment,\n    Statistic,\n    TextArea,\n    Confirm, Loader, Dimmer\n} from 'semantic-ui-react';\nimport {encrypt} from '../components/sha256';\nimport {toast} from 'react-toastify';\n\nexport class LoginPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            errUserMsg: {\n                content: \"\",\n            },\n            errPassMsg: {\n                content: \"\",\n            },\n            errpinCode: {\n                content: \"\",\n            },\n            userInfo: {\n                token: '',\n                email: '',\n                ipAddress: ''\n            },\n            userName: '',\n            passWord: '',\n            pinCode: '',\n            isVerified: false,\n            isChecking: false\n        };\n        [\n            'submitLogin',\n            'handleChangeUser',\n            'handleChangePass',\n            'verifyEmail',\n            'handleChangePinCode'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    handleChangePinCode(event, data) {\n        this.setState({\n            pinCode: data.value\n        });\n    }\n\n    handleChangeUser(event, data) {\n        this.setState({\n            userName: data.value\n        });\n    }\n\n    handleChangePass(event, data) {\n        this.setState({\n            passWord: data.value\n        });\n    }\n\n    componentDidMount() {\n        console.log(this.props.ipAddress);\n    }\n\n    verifyEmail() {\n        this.setState({\n            isChecking: true\n        });\n        let username = this.state.userName;\n\n        let encoded = \"email=\" + username +\n            \"&ipAddress=\" + this.props.ipAddress;\n\n        console.log(encoded);\n        let isValid = false;\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=verifyemail', {\n            method: 'POST',\n            body: encoded,\n            headers: {\"Content-type\": \"application/x-www-form-urlencoded\"}\n        }).then(async function (response) {\n            let msgerr = '';\n            await response.json().then(function (data) {\n                console.log(data);\n                data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"]) : isValid = true;\n                if (!msgerr) {\n                    toast.success(\"Please check your email to get PIN code!\", {position: toast.POSITION.TOP_RIGHT});\n                } else {\n                    toast.error(msgerr);\n                }\n            });\n        }).then(() => {\n            this.setState({\n                isChecking: false\n            });\n            if (isValid) {\n                this.setState({\n                    isVerified: true\n                });\n            }\n        })\n    }\n\n    submitLogin() {\n        this.setState({\n            isChecking: true\n        });\n        console.log(this.state.passWord)\n        let passWordHash = encrypt(this.state.passWord);\n        let username = this.state.userName;\n        let pincode = this.state.pinCode;\n\n        let encoded = \"email=\" + username +\n            \"&pass=\" + passWordHash +\n            \"&pincode=\" + pincode +\n            \"&ipAddress=\" + this.props.ipAddress;\n\n        console.log(encoded);\n        let isValid = false;\n        let token = \"\";\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=login', {\n            method: 'POST',\n            body: encoded,\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(async function (response) {\n            let msgerr = '';\n            // debugger;\n            await response.json().then(function (data) {\n                console.log(data);\n                data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"]) : isValid = true;\n                if (!msgerr) {\n                    token = data['token'];\n                    sessionStorage.setItem('tokenTBh', data['token']);\n                    sessionStorage.setItem('emailTBh', username);\n                    toast.success(\"Login Successfully!\", {position: toast.POSITION.TOP_RIGHT});\n                } else {\n                    toast.error(msgerr);\n                }\n            });\n        }).then(() => {\n            this.setState({\n                isChecking: false\n            });\n            if (isValid) {\n                this.props.setTokenValid(username, token);\n            }\n        })\n    }\n\n    render() {\n        return (\n            <Segment>\n                <Form>\n                    <Form.Input\n                        error={this.state.errUserMsg.content != \"\" ? this.state.errUserMsg : null}\n                        fluid\n                        onChange={this.handleChangeUser}\n                        value={this.state.userName}\n                        label='User_Name:'\n                        name=\"username\"\n                        placeholder='Your Email'\n                    />\n                    {this.state.isVerified && <Form.Input\n                        style={{display: this.state.isVerified ? '' : 'none'}}\n                        error={this.state.errPassMsg.length > 0 ? this.state.errPassMsg : null}\n                        fluid\n                        onChange={this.handleChangePass}\n                        value={this.state.passWord}\n                        type=\"password\"\n                        label='Password:'\n                        placeholder='Put Your Password here...'\n                    />}\n\n                    {this.state.isVerified && <Form.Input\n                        error={this.state.errpinCode.length > 0 ? this.state.errpinCode : null}\n                        fluid\n                        onChange={this.handleChangePinCode}\n                        value={this.state.pinCode}\n                        type=\"number\"\n                        label='Pin Code:'\n                        placeholder='Put your Pin code here...'\n                    />}\n                    {this.state.isVerified ?\n                        <Button fluid size=\"large\" onClick={this.submitLogin} disabled={this.state.isChecking} primary\n                                type='submit'>\n                            Submit\n                        </Button>\n                        :\n                        <Button fluid size=\"large\" onClick={this.verifyEmail} disabled={this.state.isChecking} primary\n                                type='submit'>\n                            Verify\n                        </Button>\n                    }\n                </Form>\n            </Segment>\n        )\n    }\n}\n\nLoginPage.propTypes = {\n    ipAddress: PropTypes.string,\n    setTokenValid: PropTypes.func\n}\n\n"]},"metadata":{},"sourceType":"module"}