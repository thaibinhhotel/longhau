{"ast":null,"code":"import _defineProperty from \"/Users/bangth/Desktop/TBHotel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/bangth/Desktop/TBHotel/src/components/ListOption.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Button, Form, Input, Dropdown, Divider, Grid, Label, Statistic } from 'semantic-ui-react';\nimport PropTypes from \"prop-types\";\nimport TableBT from 'react-bootstrap/Table';\nimport { Segment } from 'semantic-ui-react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nfunction formatNumber(num) {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n  constructor(props) {\n    console.log('constructor');\n    super(props);\n    this.state = {\n      items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n      option: {\n        description: '',\n        optionid: null,\n        price: 0,\n        quantity: 0,\n        total: 0\n      },\n      listoptionIds: [],\n      optionListSelected: [],\n      totalOptions: 0\n    };\n    ['handleChangeDropdown', 'handleChangeQuantity', 'handleAddRow', 'handleRemoveRow', 'handleOptionOtherChange'].forEach(method => this[method] = this[method].bind(this));\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    let listOptionSlt = this.props.optionListSelected;\n    let listOptionSltIds = [];\n    listOptionSlt && listOptionSlt.map(item => {\n      listOptionSltIds.push(item[\"optionid\"]);\n    });\n    var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n    var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n    this.setState({\n      items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n    }); //get List option for select\n\n    var listoptionIdstmp = {};\n    var listoptionIds = [];\n    this.props.listoption.map(item => {\n      listoptionIdstmp = {};\n      listoptionIdstmp['key'] = item['optionId'];\n      listoptionIdstmp['text'] = item['description'];\n      listoptionIdstmp['value'] = item['optionId'];\n      listoptionIds.push(listoptionIdstmp);\n    });\n    this.setState({\n      listoptionIds: listoptionIds\n    }); //Set value for State: optionListSelected\n\n    this.setState({\n      optionListSelected: this.props.optionListSelected\n    });\n  }\n\n  handleAddRow() {\n    console.log('handleAddRow');\n\n    const option = _objectSpread({}, this.state.option);\n\n    let optionListSelected = this.state.optionListSelected;\n    let flagNew = true;\n\n    for (let i = 0; i < optionListSelected.length; i++) {\n      if (optionListSelected[i].optionid == option.optionid) {\n        if (optionListSelected[i].description.startsWith(\"Other\")) {\n          optionListSelected[i].quantity = 1;\n          optionListSelected[i].total = option.total;\n        } else {\n          optionListSelected[i].quantity = parseInt(option.quantity) + parseInt(optionListSelected[i].quantity);\n          optionListSelected[i].total = parseInt(optionListSelected[i].quantity) * parseInt(optionListSelected[i].price);\n        }\n\n        flagNew = false;\n        break;\n      }\n    }\n\n    console.log(optionListSelected);\n\n    if (flagNew) {\n      optionListSelected.push(option);\n    }\n\n    this.setState({\n      optionListSelected: optionListSelected\n    });\n    this.props.onChangeOption(optionListSelected);\n  }\n\n  handleRemoveRow() {\n    console.log('handleRemoveRow');\n    const optionListSelected = this.state.optionListSelected;\n    optionListSelected.pop();\n    this.setState({\n      optionListSelected: optionListSelected\n    });\n    this.props.onChangeOption(optionListSelected);\n  }\n\n  handleChangeQuantity(event, data) {\n    console.log('handleChangeQuantity');\n\n    if (!data) {\n      return;\n    }\n\n    if (isNaN(data.value)) {\n      return;\n    } else {\n      if (parseInt(data.value) < 0 || parseInt(data.value) > 100) {\n        toast.info('Số lượng phải từ 0 - 100');\n        return;\n      }\n    }\n\n    let option = _objectSpread({}, this.state.option);\n\n    option['quantity'] = parseInt(data.value);\n    option['total'] = parseInt(data.value) * parseInt(option['price']);\n    this.setState({\n      option: option\n    });\n  }\n\n  handleChangeDropdown(event, data) {\n    console.log('handleChangeDropdown');\n    const listoption = this.props.listoption;\n    let tmp = [];\n\n    for (let i = 0; i < listoption.length; i++) {\n      if (listoption[i].optionId == data.value) {\n        tmp = [];\n        tmp = listoption[i];\n        tmp['optionid'] = listoption[i].optionId;\n        tmp['quantity'] = 1;\n        tmp['total'] = tmp['price'];\n        break;\n      }\n    }\n\n    this.setState({\n      option: tmp\n    });\n  }\n\n  handleOptionOtherChange(val, data) {\n    let tmp = _objectSpread({}, this.state.option);\n\n    tmp['total'] = parseInt(data.value) ? parseInt(data.value) : 0;\n    console.log(tmp);\n    this.setState({\n      option: tmp\n    });\n  }\n\n  render() {\n    console.log('render');\n    const items = this.state.optionListSelected; // console.log(items);\n    // console.log(this.props.listoptionIds);\n    // console.log(this.props.listoption);\n    // console.log(this.props.optionListSelected);\n    // console.log(this.state.listoptionIds)\n    // console.log(this.state.optionListSelected);\n    // debugger;\n\n    var total_option = 0;\n    var count = 0;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      placeholder: true,\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: 1,\n      relaxed: \"very\",\n      stackable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Lo\\u1EA1i SP:\"), React.createElement(Dropdown, {\n      options: this.state.listoptionIds,\n      value: this.state.option.optionid,\n      placeholder: \"Choose an option\",\n      selection: true,\n      onChange: this.handleChangeDropdown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"S\\u1ED1 l\\u01B0\\u1EE3ng:\"), React.createElement(Input, {\n      disabled: this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.description.startsWith(\"Other\"),\n      placeholder: \"...\",\n      type: \"number\",\n      max: \"100\",\n      min: \"0\",\n      value: this.state.option.quantity,\n      onChange: this.handleChangeQuantity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \" S\\u1ED1 ti\\u1EC1n/1 sp: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, formatNumber(this.state.option.price), \" VND\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      horizontal: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Total\"), this.state.option.description.startsWith(\"Other\") ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"small\",\n      type: \"number\",\n      value: this.state.option.total,\n      onChange: this.handleOptionOtherChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })) : React.createElement(Statistic, {\n      horizontal: true,\n      size: \"tiny\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Statistic.Value, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, formatNumber(this.state.option.total)), React.createElement(Statistic.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"vnd\")), React.createElement(Button, {\n      content: \"Add\",\n      icon: \"plus square\",\n      size: \"big\",\n      color: \"grey\",\n      onClick: this.handleAddRow,\n      disabled: this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.quantity == 0 || this.state.option.total == 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }))))), React.createElement(Button.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), this.state.optionListSelected ? React.createElement(TableBT, {\n      size: \"sm\",\n      striped: true,\n      bordered: true,\n      hover: true,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(Button, {\n      label: \"Remove\",\n      disabled: this.state.optionListSelected.length === 0,\n      icon: \"minus square\",\n      onClick: this.handleRemoveRow,\n      floated: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, this.state.optionListSelected.map(item => React.createElement(\"tr\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, item && [React.createElement(\"td\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, item.quantity, \" - \", item.description)), React.createElement(\"td\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      style: {\n        float: 'right'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(Label, {\n      as: \"a\",\n      color: \"olive\",\n      tag: true,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, formatNumber(item.total), \" VND\")), React.createElement(\"p\", {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, count = count + 1, \" \", total_option = total_option + item.total))]))), React.createElement(\"tfoot\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      style: {\n        float: 'right'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(Label, {\n      as: \"a\",\n      color: \"yellow\",\n      tag: true,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, formatNumber(total_option), \" VND\")))))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }));\n  }\n\n}\nListOption.propTypes = {\n  listoptionIds: PropTypes.array,\n  listoption: PropTypes.array,\n  optionListSelected: PropTypes.array,\n  onChangeOption: PropTypes.func\n};","map":{"version":3,"sources":["/Users/bangth/Desktop/TBHotel/src/components/ListOption.js"],"names":["React","Button","Form","Input","Dropdown","Divider","Grid","Label","Statistic","PropTypes","TableBT","Segment","ToastContainer","toast","formatNumber","num","toString","replace","ListOption","Component","constructor","props","console","log","state","items","listoptionIds","slice","optionListSelected","length","option","description","optionid","price","quantity","total","totalOptions","forEach","method","bind","componentDidMount","listOptionSlt","listOptionSltIds","map","item","push","listOptionIDsTmp","concat","listOptionIDsMerge","filter","pos","indexOf","setState","listoptionIdstmp","listoption","handleAddRow","flagNew","i","startsWith","parseInt","onChangeOption","handleRemoveRow","pop","handleChangeQuantity","event","data","isNaN","value","info","handleChangeDropdown","tmp","optionId","handleOptionOtherChange","val","render","total_option","count","width","Math","random","float","propTypes","array","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Button, Form, Input, Dropdown, Divider, Grid, Label, Statistic} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport TableBT from 'react-bootstrap/Table';\nimport {Segment} from 'semantic-ui-react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nfunction formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        console.log('constructor');\n        super(props);\n        this.state = {\n            items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n            option: {\n                description: '',\n                optionid: null,\n                price: 0,\n                quantity: 0,\n                total: 0\n            },\n            listoptionIds: [],\n            optionListSelected: [],\n            totalOptions: 0,\n        };\n        [\n            'handleChangeDropdown',\n            'handleChangeQuantity',\n            'handleAddRow',\n            'handleRemoveRow',\n            'handleOptionOtherChange'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount');\n        let listOptionSlt = this.props.optionListSelected;\n        let listOptionSltIds = [];\n        listOptionSlt && listOptionSlt.map(item => {\n            listOptionSltIds.push(item[\"optionid\"])\n        })\n\n        var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n        var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n\n        this.setState({\n            items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n        });\n\n\n        //get List option for select\n        var listoptionIdstmp = {};\n        var listoptionIds = [];\n\n        this.props.listoption.map(item => {\n            listoptionIdstmp = {}\n            listoptionIdstmp['key'] = item['optionId'];\n            listoptionIdstmp['text'] = item['description'];\n            listoptionIdstmp['value'] = item['optionId'];\n            listoptionIds.push(listoptionIdstmp);\n        });\n        this.setState({\n            listoptionIds: listoptionIds,\n        });\n\n        //Set value for State: optionListSelected\n        this.setState({\n            optionListSelected: this.props.optionListSelected\n        });\n\n    }\n\n\n    handleAddRow() {\n        console.log('handleAddRow');\n        const option = {...this.state.option};\n        let optionListSelected = this.state.optionListSelected;\n        let flagNew = true;\n        for (let i = 0; i < optionListSelected.length; i++) {\n            if (optionListSelected[i].optionid == option.optionid) {\n                if(optionListSelected[i].description.startsWith(\"Other\")){\n                    optionListSelected[i].quantity = 1;\n                    optionListSelected[i].total = option.total;\n                } else {\n                    optionListSelected[i].quantity = parseInt(option.quantity) + parseInt(optionListSelected[i].quantity);\n                    optionListSelected[i].total = parseInt(optionListSelected[i].quantity) * parseInt(optionListSelected[i].price);\n                }\n                flagNew = false;\n                break;\n            }\n        }\n        console.log(optionListSelected);\n        if (flagNew) {\n            optionListSelected.push(option);\n        }\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleRemoveRow() {\n        console.log('handleRemoveRow');\n        const optionListSelected = this.state.optionListSelected;\n        optionListSelected.pop();\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleChangeQuantity(event, data) {\n        console.log('handleChangeQuantity');\n        if(!data){\n            return;\n        }\n        if (isNaN(data.value)) {\n            return\n        } else {\n            if (parseInt(data.value) < 0 || parseInt(data.value) > 100) {\n                toast.info('Số lượng phải từ 0 - 100');\n                return;\n            }\n        }\n        let option = {...this.state.option};\n        option['quantity'] = parseInt(data.value);\n        option['total'] = parseInt(data.value) * parseInt(option['price']);\n\n        this.setState({\n            option: option,\n        });\n    }\n\n    handleChangeDropdown(event, data) {\n        console.log('handleChangeDropdown');\n        const listoption = this.props.listoption;\n        let tmp = [];\n        for (let i = 0; i < listoption.length; i++) {\n            if (listoption[i].optionId == data.value) {\n                tmp = [];\n                tmp = listoption[i];\n                tmp['optionid'] = listoption[i].optionId;\n                tmp['quantity'] = 1;\n                tmp['total'] = tmp['price'];\n                break;\n            }\n        }\n        this.setState({\n            option: tmp,\n        });\n    }\n\n    handleOptionOtherChange(val, data){\n        let tmp = {...this.state.option};\n        tmp['total'] = (parseInt(data.value) ? parseInt(data.value) : 0);\n        console.log(tmp);\n        this.setState({\n           option: tmp\n        });\n    }\n\n    render() {\n        console.log('render');\n        const items = this.state.optionListSelected;\n\n        // console.log(items);\n        // console.log(this.props.listoptionIds);\n        // console.log(this.props.listoption);\n        // console.log(this.props.optionListSelected);\n        // console.log(this.state.listoptionIds)\n        // console.log(this.state.optionListSelected);\n        // debugger;\n        var total_option = 0;\n        var count = 0;\n        return (\n            <div>\n                <div>\n                    <Segment placeholder textAlign='center'>\n                        <Grid columns={1} relaxed='very' stackable>\n                            <Grid.Column>\n                                <Form>\n                                    <Label>Loại SP:</Label>\n                                    <Dropdown\n                                        options={this.state.listoptionIds}\n                                        value={this.state.option.optionid}\n                                        placeholder='Choose an option'\n                                        selection\n                                        onChange={this.handleChangeDropdown}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label>Số lượng:</Label>\n                                    <Input\n                                        disabled={this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.description.startsWith(\"Other\")}\n                                        placeholder='...'\n                                        type='number'\n                                        max='100'\n                                        min='0'\n                                        value={this.state.option.quantity}\n                                        onChange={this.handleChangeQuantity}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label> Số tiền/1\n                                        sp: <b>{formatNumber(this.state.option.price)} VND</b>\n                                    </Label>\n                                    <br/>\n                                    <br/>\n                                    {/*<Label style={{display: this.state.errMessQuantity}} basic color='red'*/}\n                                    {/*       pointing='left'>*/}\n                                    {/*    Số lượng từ phải từ 0 - 100*/}\n                                    {/*</Label>*/}\n                                </Form>\n\n                                <Divider horizontal>Total</Divider>\n\n                                {this.state.option.description.startsWith(\"Other\")\n                                    ? <div>\n                                        <Input size=\"small\" type=\"number\" value={this.state.option.total} onChange={this.handleOptionOtherChange}/>\n                                        <br/><br/>\n                                     </div>\n                                    : <Statistic horizontal size='tiny'>\n                                        <Statistic.Value>{formatNumber(this.state.option.total)}</Statistic.Value>\n                                        <Statistic.Label>vnd</Statistic.Label>\n                                     </Statistic>\n                                }\n\n                                <Button content='Add' icon='plus square' size='big' color='grey'\n                                        onClick={this.handleAddRow}\n                                        disabled={this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.quantity == 0 || this.state.option.total == 0}/>\n                            </Grid.Column>\n                        </Grid>\n                    </Segment>\n                </div>\n                <Button.Group>\n                </Button.Group>\n                {this.state.optionListSelected ? <TableBT size=\"sm\" striped bordered hover style={{width: '100%'}}>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th>\n                            <Button\n                                label='Remove'\n                                disabled={this.state.optionListSelected.length === 0}\n                                icon='minus square'\n                                onClick={this.handleRemoveRow}\n                                floated='right'\n                            />\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.optionListSelected.map((item) => (\n                        <tr key={Math.random()}>\n                            {(item) && (\n                                [<td key={Math.random()}>\n                                    <b>{item.quantity} - {item.description}</b>\n                                </td>,\n                                    <td key={Math.random()}>\n                                        <b style={{float: 'right'}}><Label as='a' color='olive' tag\n                                                                           size='large'>{formatNumber(item.total)} VND</Label></b>\n                                        <p hidden>{count = count + 1} {total_option = total_option + item.total}</p>\n                                    </td>]\n                            )\n                            }\n                        </tr>\n                    ))}\n                    </tbody>\n                    <tfoot>\n                    <tr>\n                        <td></td>\n                        <td>\n                            <b style={{float: 'right'}}><Label as='a' color='yellow' tag\n                                                               size='large'>{formatNumber(total_option)} VND</Label></b>\n                        </td>\n                    </tr>\n                    </tfoot>\n                </TableBT> : <div></div>\n                }\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n    onChangeOption: PropTypes.func,\n}"]},"metadata":{},"sourceType":"module"}